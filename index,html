<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Tic-Tac-Toe with Player Images (Upgraded)</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      text-align: center;
      background: #f8f9fa;
      margin-top: 20px;
    }
    .player-setup {
      margin-bottom: 20px;
    }
    .player-info {
      margin-bottom: 10px;
    }
    input[type="text"], input[type="file"] {
      margin: 5px;
      padding: 8px;
    }
    button {
      padding: 10px 20px;
      font-size: 16px;
      margin: 10px;
      cursor: pointer;
      border: none;
      background: #007bff;
      color: white;
      border-radius: 5px;
      transition: 0.3s;
    }
    button:hover {
      background: #0056b3;
    }
    .board {
      display: grid;
      grid-template-columns: repeat(3, 120px);
      grid-gap: 8px;
      justify-content: center;
      margin: 20px auto;
    }
    .cell {
      width: 120px;
      height: 120px;
      background-color: #e9ecef;
      border: 2px solid #495057;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 30px;
      cursor: pointer;
      overflow: hidden;
      position: relative;
    }
    .cell img {
      max-width: 80%;
      max-height: 80%;
      opacity: 0;
      animation: fadeIn 0.5s forwards;
    }
    @keyframes fadeIn {
      to { opacity: 1; }
    }
    #message {
      margin-top: 20px;
      font-size: 24px;
      font-weight: bold;
      color: #28a745;
    }
    #current-turn {
      margin-top: 10px;
      font-size: 20px;
      font-weight: bold;
      color: #343a40;
    }
    .highlight {
      background-color: #ffc107 !important;
    }
  </style>
</head>
<body>

<h1>🎮 Tic-Tac-Toe Game with Images 🎮</h1>

<div class="player-setup" id="setup-area">
  <div class="player-info">
    <input type="text" id="player1-name" placeholder="Player 1 Name">
    <input type="file" id="player1-img" accept="image/*">
  </div>
  <div class="player-info">
    <input type="text" id="player2-name" placeholder="Player 2 Name">
    <input type="file" id="player2-img" accept="image/*">
  </div>
  <button onclick="startGame()">Start Game</button>
</div>

<div id="current-turn"></div>

<div class="board" id="board"></div>

<div id="message"></div>
<button id="play-again" style="display: none;" onclick="restartGame()">Play Again 🔄</button>

<script>
  let player1 = { name: "", imgSrc: "" };
  let player2 = { name: "", imgSrc: "" };
  let currentPlayer;
  let gameActive = false;
  let boardState = ["", "", "", "", "", "", "", "", ""];
  let winnerCombo = [];

  function startGame() {
    const name1 = document.getElementById('player1-name').value.trim();
    const name2 = document.getElementById('player2-name').value.trim();
    const img1 = document.getElementById('player1-img').files[0];
    const img2 = document.getElementById('player2-img').files[0];

    if (!name1 || !name2 || !img1 || !img2) {
      alert("Please enter names and upload images for both players!");
      return;
    }

    const reader1 = new FileReader();
    const reader2 = new FileReader();

    reader1.onload = function (e) {
      player1 = { name: name1, imgSrc: e.target.result };
      reader2.readAsDataURL(img2);
    }

    reader2.onload = function (e) {
      player2 = { name: name2, imgSrc: e.target.result };
      initializeBoard();
    }

    reader1.readAsDataURL(img1);
  }

  function initializeBoard() {
    const board = document.getElementById('board');
    board.innerHTML = "";
    boardState = ["", "", "", "", "", "", "", "", ""];
    winnerCombo = [];
    gameActive = true;
    currentPlayer = player1;
    updateTurnDisplay();
    document.getElementById('play-again').style.display = 'none';
    document.getElementById('message').innerText = "";

    for (let i = 0; i < 9; i++) {
      const cell = document.createElement('div');
      cell.classList.add('cell');
      cell.dataset.index = i;
      cell.addEventListener('click', handleCellClick);
      board.appendChild(cell);
    }
  }

  function handleCellClick(event) {
    const index = event.target.dataset.index;
    if (!gameActive || boardState[index] !== "") return;

    boardState[index] = currentPlayer.name;
    const img = document.createElement('img');
    img.src = currentPlayer.imgSrc;
    event.target.appendChild(img);

    if (checkWin(currentPlayer.name)) {
      document.getElementById('message').innerText = `${currentPlayer.name} Wins! 🏆`;
      highlightWinningCells();
      gameActive = false;
      document.getElementById('play-again').style.display = 'inline-block';
    } else if (boardState.every(cell => cell !== "")) {
      document.getElementById('message').innerText = "It's a Draw! 🤝";
      gameActive = false;
      document.getElementById('play-again').style.display = 'inline-block';
    } else {
      currentPlayer = currentPlayer === player1 ? player2 : player1;
      updateTurnDisplay();
    }
  }

  function updateTurnDisplay() {
    document.getElementById('current-turn').innerText = `Turn: ${currentPlayer.name}`;
  }

  function checkWin(playerName) {
    const winningCombos = [
      [0,1,2],[3,4,5],[6,7,8], // rows
      [0,3,6],[1,4,7],[2,5,8], // cols
      [0,4,8],[2,4,6]          // diagonals
    ];

    for (let combo of winningCombos) {
      if (combo.every(index => boardState[index] === playerName)) {
        winnerCombo = combo;
        return true;
      }
    }
    return false;
  }

  function highlightWinningCells() {
    for (let idx of winnerCombo) {
      const cell = document.querySelector(`.cell[data-index="${idx}"]`);
      cell.classList.add('highlight');
    }
  }

  function restartGame() {
    initializeBoard();
  }
</script>

</body>
</html>
